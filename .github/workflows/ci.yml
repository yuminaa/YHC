name: YHP CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build:
    name: ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.compiler }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]
        arch: [ arm64 ]
        compiler: [ clang ]
        build_type: [ Release, Debug ]

    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: "true"
      CCACHE_MAXSIZE: "500M"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Fetch Google Test
        if: ${{ !hashFiles('vendor/googletest/**') }}
        run: |
          git clone --depth 1 -b v1.15.2 https://github.com/google/googletest.git vendor/googletest

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-${{ matrix.build_type }}
          max-size: 500M

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install \
            cmake \
            ninja \
            llvm \
            lcov \
            || true

      - name: Configure Compiler
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            if [ "${{ runner.os }}" = "macOS" ]; then
              LLVM_PATH=$(brew --prefix llvm)
              echo "CC=$LLVM_PATH/bin/clang" >> $GITHUB_ENV
              echo "CXX=$LLVM_PATH/bin/clang++" >> $GITHUB_ENV
              echo "LDFLAGS=-L$LLVM_PATH/lib" >> $GITHUB_ENV
              echo "CPPFLAGS=-I$LLVM_PATH/include" >> $GITHUB_ENV
            fi
          fi

      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install \
            -DBUILD_TESTING=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_CXX_FLAGS="-stdlib=libc++ --coverage -fprofile-instr-generate -fcoverage-mapping" \
            -DCMAKE_C_FLAGS="--coverage"

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build . --config ${{ matrix.build_type }} -j$(sysctl -n hw.ncpu)

      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          export GTEST_COLOR=yes
          ctest --output-on-failure -C ${{ matrix.build_type }} --verbose --timeout 300

      - name: Generate Coverage Report
        working-directory: ${{ github.workspace }}
        run: |
          lcov --capture --directory build --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '/opt/*' '*/vendor/*' '*/tests/*' --output-file coverage.info
          lcov --list coverage.info
          
          pip3 install lcov_cobertura
          python3 -m lcov_cobertura coverage.info --output coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.info,./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.info
            coverage.xml
          retention-days: 14

      - name: Cache Build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/build
            !${{ github.workspace }}/build/CMakeCache.txt
          key: ${{ runner.os }}-build-${{ matrix.arch }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/*.cpp', '**/*.hpp', '**/CMakeLists.txt') }}